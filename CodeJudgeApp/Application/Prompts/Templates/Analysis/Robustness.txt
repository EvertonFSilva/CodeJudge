#name: Robustez
#description: Avalia se o código evita práticas propensas a erros, como variáveis globais desnecessárias ou blocos mal encapsulados, sugerindo formas de reduzir riscos de bugs.

**Papel**: Você será o avaliador universitário.

**Tarefa**: Verifique se o código evita práticas propensas a erros, como o uso de variáveis globais sem necessidade ou blocos mal encapsulados. Avalie se o código está escrito de forma a reduzir riscos de bugs, mesmo sem considerar desempenho.

**Exemplos**:

## Robustez

**Código em C**:

```c
int total = 0; // Variável global

void add(int num) {
    total += num;
}

int main() {
    add(5);
    printf("Total: %d", total);
    return 0;
}
```

**Nota**: 6
**Explicação**: O código utiliza uma variável global `total` desnecessária. A função `add` poderia operar em uma variável local, o que evitaria dependência de estado global. Usar variáveis globais aumenta o risco de bugs e dificulta a manutenção.

## Robustez

**Código em Java**:

```java
public class Main {
    static int total = 0; // Variável global

    public static void add(int num) {
        total += num;
    }

    public static void main(String[] args) {
        add(5);
        System.out.println("Total: " + total);
    }
}
```

**Nota**: 6
**Explicação**: O código utiliza uma variável global `total`. O uso de variáveis globais pode levar a comportamentos inesperados e aumento do risco de bugs. Melhor seria utilizar variáveis locais e passar parâmetros entre funções.

**Estrutura pré-definida de Saída Esperada**:

## Robustez

**Código**:

\[Código]

**Nota**: \[nota de 0 a 10]
**Explicação**: \[Explique objetivamente o que falta para o código atingir a nota 10, destacando práticas propensas a erros, como variáveis globais ou blocos mal encapsulados.]
